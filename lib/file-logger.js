// Generated by CoffeeScript 1.12.6
(function() {
  var FileLogger, fs, util,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  fs = require('fs');

  util = require('util');

  FileLogger = (function() {
    function FileLogger(config) {
      this.end = bind(this.end, this);
      this.close = bind(this.close, this);
      this.is_closed = bind(this.is_closed, this);
      this.warn = bind(this.warn, this);
      this.err = bind(this.err, this);
      this.error = bind(this.error, this);
      this.info = bind(this.info, this);
      this.log = bind(this.log, this);
      this._configure = bind(this._configure, this);
      this._configure(config);
    }

    FileLogger.prototype._configure = function(config) {
      var ref;
      if (((this.out_stream != null) || (this.err_stream != null)) && !this.closed) {
        this.close();
      }
      if (config == null) {
        config = {};
      }
      if (config.err_file == null) {
        config.err_file = (ref = config.out_file) != null ? ref : "log.err";
      }
      if (config.out_file == null) {
        config.out_file = "log.out";
      }
      this.out_stream = fs.createWriteStream(config.out_file, {
        flags: 'a'
      });
      this.out_stream.on("finish", (function() {
        return void 0;
      }));
      if (config.err_file === config.out_file) {
        this.err_stream = this.out_stream;
      } else {
        this.err_stream = fs.createWriteStream(config.err_file, {
          flags: 'a'
        });
        this.err_stream.on("finish", (function() {
          return void 0;
        }));
      }
      return this.closed = false;
    };

    FileLogger.prototype._format_log_line = function() {
      return util.format.apply(null, arguments) + "\n";
    };

    FileLogger.prototype.log = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!this.closed) {
        return this.out_stream.write(this._format_log_line.apply(this, args));
      }
    };

    FileLogger.prototype.info = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!this.closed) {
        return this.out_stream.write(this._format_log_line.apply(this, args));
      }
    };

    FileLogger.prototype.error = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!this.closed) {
        return this.err_stream.write(this._format_log_line.apply(this, args));
      }
    };

    FileLogger.prototype.err = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!this.closed) {
        return this.err_stream.write(this._format_log_line.apply(this, args));
      }
    };

    FileLogger.prototype.warn = function() {
      var args;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (!this.closed) {
        return this.err_stream.write(this._format_log_line.apply(this, args));
      }
    };

    FileLogger.prototype.is_closed = function() {
      return this.closed;
    };

    FileLogger.prototype.close = function() {
      var err;
      if (!this.closed) {
        this.closed = true;
        try {
          this.out_stream.end();
          this.out_stream = null;
        } catch (error) {
          err = error;
        }
        try {
          this.err_stream.end();
          return this.err_stream = null;
        } catch (error) {
          err = error;
        }
      }
    };

    FileLogger.prototype.end = function() {
      return this.close();
    };

    return FileLogger;

  })();

  exports.FileLogger = FileLogger;

}).call(this);

//# sourceMappingURL=file-logger.js.map
