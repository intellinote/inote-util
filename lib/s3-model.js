// Generated by CoffeeScript 1.12.6
(function() {
  var AWS, DEFAULT_DEFAULT_FOLDER, S3Model,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  AWS = require('aws-sdk');

  DEFAULT_DEFAULT_FOLDER = 'default-folder';

  S3Model = (function() {
    function S3Model(config) {
      this.delete_file = bind(this.delete_file, this);
      this.update_file = bind(this.update_file, this);
      this.get_meta_data = bind(this.get_meta_data, this);
      this.get_file = bind(this.get_file, this);
      this.create_file = bind(this.create_file, this);
      this.folder_exists = bind(this.folder_exists, this);
      this.get_all_folders = bind(this.get_all_folders, this);
      this.delete_folder = bind(this.delete_folder, this);
      this.create_folder = bind(this.create_folder, this);
      var ref;
      if (config == null) {
        config = {};
      }
      this.default_folder = (ref = config.default_folder) != null ? ref : "default-folder";
      if (config.credentials != null) {
        AWS.config.credentials = config.credentials;
      } else if (config.access_key_id != null) {
        AWS.config.credentials = config;
      }
      if (AWS.config.credentials == null) {
        console.warn("WARNING: S3Model created but no AWS credentials have been set. You may want to pass `{access_key_id:, secret_access_key:, region: }` to the S3Model constructor.");
      }
      this.s3 = new AWS.S3({
        endpoint: 's3.amazonaws.com',
        signature_version: 'v4'
      });
    }

    S3Model.prototype.create_folder = function(folder_name, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name
      };
      return this.s3.createBucket(data, function(err, response) {
        return callback(err, response);
      });
    };

    S3Model.prototype.delete_folder = function(folder_name, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name
      };
      return this.s3.deleteBucket(data, function(err, response) {
        return callback(err, response);
      });
    };

    S3Model.prototype.get_all_folders = function(callback) {
      return this.s3.listBuckets({}, function(err, response) {
        return callback(err, response);
      });
    };

    S3Model.prototype.folder_exists = function(folder_name, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name
      };
      return this.s3.getBucketLocation(data, function(err, response) {
        return callback(err, !err && (response != null));
      });
    };

    S3Model.prototype.create_file = function(folder_name, filename, file_type, body, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name,
        Key: filename,
        Body: body,
        ContentType: file_type
      };
      return this.create_folder(folder_name, (function(_this) {
        return function(err, created_folder) {
          return _this.s3.putObject(data, function(err, response) {
            return callback(err, response);
          });
        };
      })(this));
    };

    S3Model.prototype.get_file = function(folder_name, filename, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name,
        Key: filename,
        Expires: 86400
      };
      return this.s3.getSignedUrl('getObject', data, function(err, url) {
        return callback(err, url);
      });
    };

    S3Model.prototype.get_meta_data = function(folder_name, filename, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name,
        Key: filename
      };
      return this.s3.headObject(data, function(err, response) {
        return callback(err, response);
      });
    };

    S3Model.prototype.update_file = function(folder_name, filename, file_type, body, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name,
        Key: filename
      };
      return this.delete_file(folder_name, filename, (function(_this) {
        return function(err, deleted_file) {
          return _this.create_file(folder_name, filename, file_type, body, function(err, created_file) {
            return callback(err, created_file);
          });
        };
      })(this));
    };

    S3Model.prototype.delete_file = function(folder_name, filename, callback) {
      var data;
      folder_name = this._sanitize_folder_name(folder_name);
      data = {
        Bucket: folder_name,
        Key: filename
      };
      return this.s3.deleteObject(data, function(err, response) {
        return callback(err, response);
      });
    };

    S3Model.prototype._sanitize_folder_name = function(folder_name) {
      return folder_name != null ? folder_name : this.default_folder;
    };

    return S3Model;

  })();

  exports.S3Model = S3Model;

}).call(this);
