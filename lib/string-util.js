// Generated by CoffeeScript 1.12.6
(function() {
  var HOMEDIR, LIB_COV, LIB_DIR, StringUtil, fs, path,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  StringUtil = (function() {
    function StringUtil() {
      this.sanitize_for_html = bind(this.sanitize_for_html, this);
      this.sanitize_for_sql_like = bind(this.sanitize_for_sql_like, this);
      this.normalize_url = bind(this.normalize_url, this);
      this.json_or_null = bind(this.json_or_null, this);
    }

    StringUtil.trim = function(str) {
      return str != null ? str.replace(/(^\s+)|(\s+$)/ig, "") : void 0;
    };

    StringUtil.isnt_blank = function(str) {
      return (str != null) && /[^\s]/.test(str);
    };

    StringUtil.is_blank = function(str) {
      return !(StringUtil.isnt_blank(str));
    };

    StringUtil.blank_to_null = function(data) {
      var k, v;
      if (typeof data === 'string') {
        if (StringUtil.is_blank(data)) {
          return null;
        }
      } else {
        for (k in data) {
          v = data[k];
          if (StringUtil.is_blank(v)) {
            delete data[k];
            data[k] = void 0;
          }
        }
      }
      return data;
    };

    StringUtil.truncate = function(text, width, marker) {
      var break_chars, max_shorten, max_width, short_width;
      if (marker == null) {
        marker = 'â€¦';
      }
      if ((text == null) || (text.length == null) || text.length <= width) {
        return text;
      } else {
        if (marker == null) {
          marker = '';
        }
        max_shorten = 10;
        break_chars = /\.|\!|\?|\,|\:|\-|\s|\0|\)|\(|\[|\]|\{|\}|\\|\/|\\|\<|\>|\"|\'/;
        short_width = max_width = width - marker.length;
        while (short_width > (width - max_shorten)) {
          if (break_chars.test(text.charAt(short_width))) {
            return "" + (text.substring(0, short_width)) + marker;
          } else {
            short_width--;
          }
        }
        return "" + (text.substring(0, max_width)) + marker;
      }
    };

    StringUtil.prototype.json_or_null = function(obj) {
      var err;
      if ((obj != null) && typeof obj === 'string' && /^\s*[\"\[\{].*[\"\]\}]\s*$/.test(obj)) {
        try {
          return obj = JSON.parse(obj);
        } catch (error) {
          err = error;
          return obj = null;
        }
      } else {
        return obj;
      }
    };

    StringUtil.escape_for_json = function(str) {
      if (str != null) {
        str = JSON.stringify(str);
        str = str.substring(1, str.length - 1);
        return str;
      } else {
        return null;
      }
    };

    StringUtil.escape_for_bash = function(param, quote_specials) {
      if (quote_specials == null) {
        quote_specials = false;
      }
      if (param != null) {
        if (quote_specials == null) {
          quote_specials = false;
        }
        if (quote_specials || !((param === '<' || param === '>' || param === '>>' || param === '.' || param === '..' || param === '*' || param === '|' || param === '||' || param === '&' || param === '&&' || param === '2>&1') || /\*$/.test(param))) {
          param = ("" + param).replace(/'/g, "'\\''");
          param = "'" + param + "'";
        }
      }
      return param;
    };

    StringUtil.escape_for_shell = function(param, quote_specials) {
      if (quote_specials == null) {
        quote_specials = false;
      }
      return StringUtil.escape_for_bash(param, quote_specials);
    };

    StringUtil.escape_for_regexp = function(str) {
      return str != null ? str.replace(/([.?*+^$[\]\/\\(){}|-])/g, "\\$1") : void 0;
    };

    StringUtil.prototype.normalize_url = function(url) {
      var ref, ref1;
      return (ref = (ref1 = URL.parse(url)) != null ? ref1.href : void 0) != null ? ref : url;
    };

    StringUtil.prototype.sanitize_for_sql_like = function(str) {
      str = str.replace(/[\'\"\\\/\?\%]/g, '_');
      return str;
    };

    StringUtil.prototype.sanitize_for_html = function(str) {
      if (str != null) {
        str = "" + str;
        str = str.replace(/&/g, '&amp;');
        str = str.replace(/"/g, '&quot;');
        str = str.replace(/'/g, '&#39;');
        str = str.replace(/</g, '&lt;');
        str = str.replace(/>/g, '&gt;');
      }
      return str;
    };

    StringUtil.truthy_string = function(s) {
      return /^((T(rue)?)|(Y(es)?)|(ON)|1)$/i.test("" + s);
    };

    StringUtil.falsey_string = function(s) {
      return /^((F(alse)?)|(No?)|(OFF)|0)$/i.test("" + s);
    };

    StringUtil.lpad = function(value, width, pad) {
      if (value == null) {
        throw new Error("value must not be null");
      } else {
        if (Array.isArray(value)) {
          return StringUtil.lpad_array(value, width, pad);
        } else {
          return StringUtil.lpad_string(value, width, pad);
        }
      }
    };

    StringUtil.lpad_array = function(value, width, pad_elt) {
      if (value == null) {
        value = [];
      }
      if (width == null) {
        width = 8;
      }
      if (pad_elt == null) {
        pad_elt = null;
      }
      while (value.length < width) {
        value = [pad_elt].concat(value);
      }
      return value;
    };

    StringUtil.lpad_string = function(value, width, pad_char) {
      if (value == null) {
        value = "";
      }
      if (width == null) {
        width = 8;
      }
      if (pad_char == null) {
        pad_char = " ";
      }
      if (("" + pad_char).length === 0) {
        throw new Error("pad must not be empty");
      }
      value = "" + value;
      while (value.length < width) {
        value = pad_char + value;
      }
      return value;
    };

    StringUtil.rpad = function(value, width, pad) {
      if (value == null) {
        throw new Error("value must not be null");
      } else {
        if (Array.isArray(value)) {
          return StringUtil.rpad_array(value, width, pad);
        } else {
          return StringUtil.rpad_string(value, width, pad);
        }
      }
    };

    StringUtil.rpad_array = function(value, width, pad_elt) {
      if (value == null) {
        value = [];
      }
      if (width == null) {
        width = 8;
      }
      if (pad_elt == null) {
        pad_elt = null;
      }
      while (value.length < width) {
        value.push(pad_elt);
      }
      return value;
    };

    StringUtil.rpad_string = function(value, width, pad_char) {
      if (value == null) {
        value = "";
      }
      if (width == null) {
        width = 8;
      }
      if (pad_char == null) {
        pad_char = " ";
      }
      if (("" + pad_char).length === 0) {
        throw new Error("pad must not be empty");
      } else {
        value = "" + value;
        while (value.length < width) {
          value += pad_char;
        }
        return value;
      }
    };

    return StringUtil;

  })();

  exports.StringUtil = StringUtil;

}).call(this);

//# sourceMappingURL=string-util.js.map
