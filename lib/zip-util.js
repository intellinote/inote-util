// Generated by CoffeeScript 1.12.6
(function() {
  var DEBUG, HOMEDIR, LIB_COV, LIB_DIR, StringUtil, ZipUtil, fs, on_exit, path, ref, ref1, shell;

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  StringUtil = require(path.join(LIB_DIR, 'string-util')).StringUtil;

  shell = require('shelljs');

  DEBUG = /(^|,)zip-?util($|,)/i.test(typeof process !== "undefined" && process !== null ? (ref = process.env) != null ? ref.NODE_DEBUG : void 0 : void 0);

  ZipUtil = (function() {
    function ZipUtil() {}

    ZipUtil.zip = function(wd, inputs, output, callback) {
      var args, cmd, ref1;
      if ((wd != null) && (inputs != null) && typeof output === 'function' && (callback == null)) {
        ref1 = [null, wd, inputs, output], wd = ref1[0], inputs = ref1[1], output = ref1[2], callback = ref1[3];
      }
      if (!((inputs != null) && (output != null))) {
        return typeof callback === "function" ? callback(new Error("Missing or invalid parameters.")) : void 0;
      } else {
        if (!Array.isArray(inputs)) {
          inputs = [inputs];
        }
        args = [];
        if (wd != null) {
          args.push("cd");
          args.push(wd);
          args.push("&&");
        }
        args.push("zip");
        args.push("-r");
        args.push("-9");
        args.push(output);
        args = args.concat(inputs);
        args = args.map(function(p) {
          return StringUtil.escape_for_bash(p);
        });
        cmd = args.join(' ');
        return shell.exec(cmd, {
          silent: true
        }, function(exit_code, output) {
          var err;
          err = null;
          if (exit_code !== 0) {
            err = new Error("Non-zero exit code (" + exit_code + ") encountered for \"" + cmd + "\". Output: " + output);
          }
          return callback(err, exit_code, output);
        });
      }
    };

    ZipUtil.unzip = function(wd, zipfile, outdir, callback) {
      var args, cmd, ref1;
      if ((wd != null) && (zipfile != null) && typeof outdir === 'function' && (callback == null)) {
        ref1 = [null, wd, zipfile, outdir], wd = ref1[0], zipfile = ref1[1], outdir = ref1[2], callback = ref1[3];
      }
      if (zipfile == null) {
        return typeof callback === "function" ? callback(new Error("Missing or invalid parameters.")) : void 0;
      } else {
        args = [];
        if (wd != null) {
          args.push("cd");
          args.push(wd);
          args.push("&&");
        }
        if (outdir != null) {
          args.push("mkdir");
          args.push("-p");
          args.push(path.dirname(outdir));
          args.push("&&");
        }
        args.push("unzip");
        args.push("-o");
        if (outdir != null) {
          args.push("-d");
          args.push(outdir);
        }
        args.push(zipfile);
        args = args.map(function(p) {
          return StringUtil.escape_for_bash(p);
        });
        cmd = args.join(' ');
        return shell.exec(cmd, {
          silent: true
        }, function(exit_code, output) {
          var err;
          err = null;
          if (exit_code !== 0) {
            err = new Error("Non-zero exit code (" + exit_code + ") encountered for \"" + cmd + "\". Output: " + output);
          }
          return callback(err, exit_code, output);
        });
      }
    };

    ZipUtil.contents = function(zipfile, callback) {
      var args, cmd;
      args = [];
      args.push("unzip");
      args.push("-Z1");
      args.push(zipfile);
      args = args.map(function(p) {
        return StringUtil.escape_for_bash(p);
      });
      cmd = args.join(' ');
      return shell.exec(cmd, {
        silent: true
      }, function(exit_code, output) {
        var contents;
        if (exit_code !== 0) {
          return callback(new Error("Non-zero exit code (" + exit_code + ") encountered for \"" + cmd + "\". Output: " + output));
        } else {
          contents = output != null ? output.trim().split("\n") : void 0;
          return callback(null, contents);
        }
      });
    };

    return ZipUtil;

  })();

  exports.ZipUtil = ZipUtil;

  if (require.main === module) {
    if (process.argv.length < 3 || (!((ref1 = process.argv[2]) === 'zip' || ref1 === 'unzip' || ref1 === 'ls'))) {
      console.log("USE: " + (path.basename(process.argv[0])) + " " + (path.basename(process.argv[1])) + " zip   <WD> <ZIP-FILE> <INPUT[S]>");
      console.log(" or: " + (path.basename(process.argv[0])) + " " + (path.basename(process.argv[1])) + " unzip <WD> <ZIP-FILE> <DEST>");
      console.log(" or: " + (path.basename(process.argv[0])) + " " + (path.basename(process.argv[1])) + " ls <ZIP-FILE>");
      process.exit(1);
    } else {
      on_exit = (function(_this) {
        return function(err, exit_code, output) {
          if (err != null) {
            console.error("ERROR: ", err);
            if (output != null) {
              console.error(output);
            }
          } else if (output != null) {
            console.log(output);
          }
          return process.exit(exit_code);
        };
      })(this);
      if (process.argv[2] === 'zip') {
        ZipUtil.zip(process.argv[3], [process.argv.slice(5)], process.argv[4], on_exit);
      } else if (process.argv[2] === 'unzip') {
        ZipUtil.unzip(process.argv[3], process.argv[4], process.argv[5], on_exit);
      } else if (process.argv[2] === 'ls') {
        ZipUtil.contents(process.argv[3], (function(_this) {
          return function(err, list) {
            if (err != null) {
              console.error("ERROR: ", err);
              return process.exit(1);
            } else {
              return console.log(list.join("\n"));
            }
          };
        })(this));
      }
    }
  }

}).call(this);

//# sourceMappingURL=zip-util.js.map
