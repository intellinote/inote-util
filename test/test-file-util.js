// Generated by CoffeeScript 1.12.6
(function() {
  var AsyncUtil, FileUtil, HOMEDIR, LIB_COV, LIB_DIR, TEST_FS, fs, path, should,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  should = require('should');

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  FileUtil = require(path.join(LIB_DIR, 'index')).FileUtil;

  AsyncUtil = require(path.join(LIB_DIR, 'index')).AsyncUtil;

  TEST_FS = path.join(HOMEDIR, "test", "data", "test-fs");

  describe('FileUtil', function() {
    it("can determine the age of a file", function(done) {
      return FileUtil.file_age(path.join(HOMEDIR, "package.json"), function(err, age1) {
        should.not.exist(err);
        return AsyncUtil.set_timeout(500, function() {
          return FileUtil.file_age(path.join(HOMEDIR, "package.json"), function(err, age2) {
            should.not.exist(err);
            (age2 - age1).should.be.above(499);
            (age2 - age1).should.be.below(600);
            return AsyncUtil.setTimeout(600, function() {
              return FileUtil.file_age(path.join(HOMEDIR, "package.json"), function(err, age3) {
                should.not.exist(err);
                (age3 - age2).should.be.above(599);
                (age3 - age2).should.be.below(700);
                return done();
              });
            });
          });
        });
      });
    });
    it("can synchronously determine the age of a file", function(done) {
      var age1;
      age1 = FileUtil.file_age_sync(path.join(HOMEDIR, "package.json"));
      return AsyncUtil.set_timeout(500, function() {
        var age2;
        age2 = FileUtil.file_age_sync(path.join(HOMEDIR, "package.json"));
        (age2 - age1).should.be.above(499);
        (age2 - age1).should.be.below(600);
        return AsyncUtil.set_timeout(600, function() {
          var age3;
          age3 = FileUtil.file_age_sync(path.join(HOMEDIR, "package.json"));
          (age3 - age2).should.be.above(599);
          (age3 - age2).should.be.below(700);
          return done();
        });
      });
    });
    it("can test if a file is a plain file", function(done) {
      return FileUtil.is_file("xyzzy.i.do.not.exist", function(err, is_file) {
        should.not.exist(err);
        is_file.should.equal(false);
        return FileUtil.is_file(LIB_DIR, function(err, is_file) {
          should.not.exist(err);
          is_file.should.equal(false);
          return FileUtil.is_file(path.join(HOMEDIR, "package.json"), function(err, is_file) {
            should.not.exist(err);
            is_file.should.equal(true);
            return done();
          });
        });
      });
    });
    it("can test if a file is a directory", function(done) {
      return FileUtil.is_directory("xyzzy.i.do.not.exist", function(err, is_dir) {
        should.not.exist(err);
        is_dir.should.equal(false);
        return FileUtil.is_directory(LIB_DIR, function(err, is_dir) {
          should.not.exist(err);
          is_dir.should.equal(true);
          return FileUtil.is_directory(path.join(HOMEDIR, "package.json"), function(err, is_dir) {
            should.not.exist(err);
            is_dir.should.equal(false);
            return done();
          });
        });
      });
    });
    it("can list the files and directories in a directory", function(done) {
      return FileUtil.ls(TEST_FS, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(5);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["dir-one", "dir-two", "file-one.txt", "file-two.xyz", "file-three.txt"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can list the files and directories in a directory (explicit types)", function(done) {
      return FileUtil.ls(TEST_FS, {
        types: ['file', 'directory']
      }, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(5);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["dir-one", "dir-two", "file-one.txt", "file-two.xyz", "file-three.txt"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can recursively list the files and directories in a directory", function(done) {
      return FileUtil.ls(TEST_FS, {
        recurse: true
      }, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(10);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["dir-one", "dir-two", "file-one.txt", "file-two.xyz", "file-three.txt", "file-one-a.txt", "file-one-b.txt", "file-one-c.xyz", "file-two-a.xyz", "file-two-b.txt"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can recursively list the files and directories matching a given pattern in a directory", function(done) {
      return FileUtil.ls(TEST_FS, {
        recurse: true,
        pattern: /one/
      }, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(5);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["dir-one", "file-one.txt", "file-one-a.txt", "file-one-b.txt", "file-one-c.xyz"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can recursively list the files matching a given pattern in a directory", function(done) {
      return FileUtil.ls(TEST_FS, {
        recurse: true,
        pattern: /\.xyz$/,
        type: 'file'
      }, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(3);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["file-two.xyz", "file-one-c.xyz", "file-two-a.xyz"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can list the files in a directory", function(done) {
      return FileUtil.ls(TEST_FS, {
        type: 'file'
      }, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(3);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["file-one.txt", "file-two.xyz", "file-three.txt"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can list the directories in a directory", function(done) {
      return FileUtil.ls(TEST_FS, {
        types: 'dir'
      }, (function(_this) {
        return function(err, files) {
          var basenames, f, i, len, ref;
          should.not.exist(err);
          should.exist(files);
          files.length.should.equal(2);
          basenames = files.map(function(x) {
            return path.basename(x);
          });
          ref = ["dir-one", "dir-two"];
          for (i = 0, len = ref.length; i < len; i++) {
            f = ref[i];
            (indexOf.call(basenames, f) >= 0).should.equal(true);
          }
          return done();
        };
      })(this));
    });
    it("can sanitize filenames", function(done) {
      var i, len, test, tests;
      tests = [["Foo.txt", "Foo.txt"], ["/home/rod/test/dir/Foo.txt", "/home/rod/test/dir/Foo.txt"], ["Foo Bar.txt", "Foo-Bar.txt"], ["/home/rod w/test dir/Foo Bar.txt", "/home/rod w/test dir/Foo-Bar.txt"], ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.txt", "xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz.txt"], ["~!@#$%^&*()+=1.2.3.4.5.6.7.8.9.txt", "-------------1-2-3-4-5-6-7-8-9.txt"]];
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        FileUtil.sanitize_filename(test[0]).should.equal(test[1]);
      }
      return done();
    });
    it("can uniquify filenames", function(done) {
      var i, len, test, tests;
      tests = [[[HOMEDIR, "package", ".json"], "package-001.json"], [[HOMEDIR, "package", ".json", 2], "package-01.json"], [[HOMEDIR, "package", ".json", 1], "package-1.json"], [[HOMEDIR, "package", ".json", 10], "package-0000000001.json"], [[HOMEDIR, "xyzzy", ".txt"], "xyzzy.txt"]];
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        FileUtil.uniquify_filename.apply(FileUtil, test[0]).should.equal(test[1]);
      }
      return done();
    });
    it("can make and remove directories", function(done) {
      (FileUtil.mkdir(path.join(HOMEDIR, "foo", "bar", "gamma", "another"))).should.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo", "bar", "gamma", "another")).should.be.ok;
      fs.closeSync(fs.openSync(path.join(HOMEDIR, "foo", "bar", "gamma", "another", "some-file"), 'w'));
      fs.existsSync(path.join(HOMEDIR, "foo", "bar", "gamma", "another", "some-file")).should.be.ok;
      (FileUtil.rmdir(path.join(HOMEDIR, "foo", "bar", "gamma", "another"), path.join(HOMEDIR, "foo", "bar", "gamma"), path.join(HOMEDIR, "foo", "bar", "i-do-not-exist"))).should.not.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo", "bar", "gamma", "another")).should.not.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo", "bar", "gamma")).should.not.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo", "bar")).should.be.ok;
      fs.closeSync(fs.openSync(path.join(HOMEDIR, "foo", "bar", "some-file"), 'w'));
      fs.existsSync(path.join(HOMEDIR, "foo", "bar", "some-file")).should.be.ok;
      (FileUtil.rm(path.join(HOMEDIR, "foo", "bar", "some-file"))).should.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo", "bar", "some-file")).should.not.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo")).should.be.ok;
      (FileUtil.rmdir(path.join(HOMEDIR, "foo"))).should.be.ok;
      fs.existsSync(path.join(HOMEDIR, "foo")).should.not.be.ok;
      return done();
    });
    it("can change file extensions", function(done) {
      var i, len, test, tests;
      tests = [["foo.foo", ".bar", "foo.bar"], ["foo.foo", "bar", "foo.bar"], ["foo.foo.foo", "bar", "foo.foo.bar"], ["foo.foo.foo", "bar.bar", "foo.foo.bar.bar"], ["/foo/bar.xxx/file.ext", ".txt", "/foo/bar.xxx/file.txt"], ["/foo/bar.xxx/file.ext", "txt", "/foo/bar.xxx/file.txt"]];
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        FileUtil.replace_extension(test[0], test[1]).should.equal(test[2]);
      }
      return done();
    });
    it("can strip file extensions", function(done) {
      var i, len, test, tests;
      tests = [["foo.foo", "foo"], ["foo.foo.foo", "foo.foo"], ["/foo/bar.xxx/file.ext", "/foo/bar.xxx/file"], ["/foo/bar.xxx/file", "/foo/bar.xxx/file"], ["/foo/bar.xxx-file", "/foo/bar"]];
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        FileUtil.strip_extension(test[0]).should.equal(test[1]);
      }
      return done();
    });
    it("can test the MIME type of a file via magic", function(done) {
      return FileUtil.get_mime_via_magic(path.join(HOMEDIR, "package.json"), function(err, type) {
        should.not.exist(err);
        type.should.equal('text/plain');
        return FileUtil.get_mime_type_via_magic(path.join(HOMEDIR, "package.json"), function(err, type) {
          should.not.exist(err);
          type.should.equal('text/plain');
          return FileUtil.get_file_mime_type_via_magic(path.join(HOMEDIR, "package.json"), function(err, type) {
            should.not.exist(err);
            type.should.equal('text/plain');
            return done();
          });
        });
      });
    });
    it("can test the MIME type of a file via magic or extension", function(done) {
      return FileUtil.get_mime(path.join(HOMEDIR, "package.json"), function(err, type) {
        should.not.exist(err);
        type.should.equal('application/json');
        return FileUtil.get_mime_type(path.join(HOMEDIR, "package.json"), function(err, type) {
          should.not.exist(err);
          type.should.equal('application/json');
          return FileUtil.get_file_mime_type(path.join(HOMEDIR, "package.json"), function(err, type) {
            should.not.exist(err);
            type.should.equal('application/json');
            return done();
          });
        });
      });
    });
    return it("can get the MIME type for a given filename or extension", function(done) {
      var found, i, len, test, tests;
      tests = [[path.join(HOMEDIR, "package.json"), "application/json"], ["package.json", "application/json"], [".json", "application/json"], ["json", "application/json"], ["", null], [null, null], [".xadf2345zaerazerqer", null]];
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        found = FileUtil.get_mime_for_ext(test[0]);
        if (test[1] != null) {
          found.should.equal(test[1]);
        } else {
          should.not.exist(found);
        }
        found = FileUtil.get_mime_for_extension(test[0]);
        if (test[1] != null) {
          found.should.equal(test[1]);
        } else {
          should.not.exist(found);
        }
      }
      return done();
    });
  });

}).call(this);
