// Generated by CoffeeScript 1.12.6
(function() {
  var AsyncUtil, HOMEDIR, LIB, LIB_COV, LIB_DIR, WorkQueue, fs, path, should;

  should = require('should');

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB = path.join(HOMEDIR, 'lib');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : LIB;

  WorkQueue = require(path.join(LIB_DIR, 'work-queue')).WorkQueue;

  AsyncUtil = require(path.join(LIB_DIR, 'index')).AsyncUtil;

  describe("WorkQueue", function() {
    it("processes tasks", function(done) {
      var action, action_count, bars, foos, size, wq;
      action_count = 0;
      foos = [];
      bars = [];
      wq = new WorkQueue();
      action = (function(_this) {
        return function(foo, bar, cb) {
          wq.pending_task_count().should.equal(0);
          wq.active_task_count().should.equal(1);
          action_count++;
          foos.push(foo);
          bars.push(bar);
          return cb(action_count, foo);
        };
      })(this);
      wq.pending_task_count().should.equal(0);
      wq.active_task_count().should.equal(0);
      size = wq.enqueue_task(action, ["f1", "b1"], (function(_this) {
        return function(count, foo) {
          var left;
          count.should.equal(1);
          foo.should.equal("f1");
          action_count.should.equal(1);
          foos.length.should.equal(1);
          foos[0].should.equal("f1");
          bars.length.should.equal(1);
          bars[0].should.equal("b1");
          wq.pending_task_count().should.equal(0);
          wq.active_task_count().should.equal(0);
          left = wq.stop_working();
          left.should.equal(0);
          return done();
        };
      })(this));
      size.should.equal(1);
      wq.pending_task_count().should.equal(1);
      wq.active_task_count().should.equal(0);
      return wq.start_working();
    });
    it("processes tasks in priority order", function(done) {
      var action, action_count, ids, wq;
      action_count = 0;
      ids = [];
      action = (function(_this) {
        return function(id, cb) {
          action_count++;
          ids.push(id);
          return cb();
        };
      })(this);
      wq = new WorkQueue();
      wq.enqueue_task(action, ["P5"], 5, (function(_this) {
        return function() {
          action_count.should.equal(2);
          ids.length.should.equal(2);
          ids[0].should.equal("P10");
          return ids[1].should.equal("P5");
        };
      })(this));
      wq.enqueue_task(action, ["P10"], 10, (function(_this) {
        return function() {
          action_count.should.equal(1);
          ids.length.should.equal(1);
          return ids[0].should.equal("P10");
        };
      })(this));
      wq.enqueue_task(action, ["P2"], 2, (function(_this) {
        return function() {
          action_count.should.equal(3);
          ids.length.should.equal(3);
          ids[0].should.equal("P10");
          ids[1].should.equal("P5");
          ids[2].should.equal("P2");
          wq.stop_working();
          return done();
        };
      })(this));
      return wq.start_working();
    });
    it("can run tasks in parallel", function(done) {
      var action, action_count, running, wq;
      action_count = 0;
      running = {};
      action = (function(_this) {
        return function(id, delay, cb) {
          action_count++;
          running[id] = true;
          return AsyncUtil.set_timeout(delay, function() {
            running[id] = false;
            return cb();
          });
        };
      })(this);
      wq = new WorkQueue({
        workers: 2
      });
      wq.enqueue_task(action, ["slow", 1000], 10, (function(_this) {
        return function() {
          running.fast.should.equal(false);
          wq.stop_working();
          return done();
        };
      })(this));
      wq.enqueue_task(action, ["fast", 1], 5, (function(_this) {
        return function() {
          return running.slow.should.equal(true);
        };
      })(this));
      return wq.start_working();
    });
    it("doesn't run tasks in parallel by default", function(done) {
      var action, action_count, running, wq;
      action_count = 0;
      running = {};
      action = (function(_this) {
        return function(id, delay, cb) {
          action_count++;
          running[id] = true;
          return AsyncUtil.set_timeout(delay, function() {
            running[id] = false;
            return cb();
          });
        };
      })(this);
      wq = new WorkQueue();
      wq.enqueue_task(action, ["slow", 1000], 10, (function(_this) {
        return function() {
          should.not.exist(running.fast);
          wq.stop_working();
          return done();
        };
      })(this));
      wq.enqueue_task(action, ["fast", 1], 5, (function(_this) {
        return function() {
          running.slow.should.equal(false);
          wq.stop_working();
          return done();
        };
      })(this));
      return wq.start_working();
    });
    return it("emits events", function(done) {
      var action, begin, completed, dequeued, enqueued, errored, wq;
      action = (function(_this) {
        return function(id, err, cb) {
          if (err != null) {
            throw err;
          } else {
            return cb();
          }
        };
      })(this);
      enqueued = {};
      dequeued = {};
      completed = {};
      errored = {};
      begin = null;
      wq = new WorkQueue();
      wq.on("task-enqueued", (function(_this) {
        return function(q, t) {
          return enqueued[t.args[0]] = true;
        };
      })(this));
      wq.on("task-dequeued", (function(_this) {
        return function(q, t) {
          return dequeued[t.args[0]] = true;
        };
      })(this));
      wq.on("task-completed", (function(_this) {
        return function(q, t, r) {
          return completed[t.args[0]] = true;
        };
      })(this));
      wq.on("error", (function(_this) {
        return function(q, t, e) {
          errored[t.args[0]] = e;
          return wq.stop_working();
        };
      })(this));
      wq.on("work-beginning", (function(_this) {
        return function(q) {
          return begin = true;
        };
      })(this));
      wq.on("work-ending", (function(_this) {
        return function(q) {
          begin.should.equal(true);
          enqueued.A.should.equal(true);
          enqueued.B.should.equal(true);
          dequeued.A.should.equal(true);
          dequeued.B.should.equal(true);
          completed.A.should.equal(true);
          should.not.exist(completed.B);
          should.not.exist(errored.A);
          should.exist(errored.B);
          return done();
        };
      })(this));
      wq.enqueue_task(action, ["A", null], (function() {
        return void 0;
      }));
      wq.enqueue_task(action, ["B", new Error("Mock Error")], (function() {
        return void 0;
      }));
      return wq.start_working();
    });
  });

}).call(this);

//# sourceMappingURL=test-work-queue.js.map
