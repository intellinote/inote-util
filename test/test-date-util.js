// Generated by CoffeeScript 1.12.6
(function() {
  var DateUtil, HOMEDIR, LIB_COV, LIB_DIR, fs, path, should;

  should = require('should');

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOMEDIR, 'lib');

  DateUtil = require(path.join(LIB_DIR, 'util')).DateUtil;

  describe('DateUtil', function() {
    it("can format dates", function(done) {
      DateUtil.format_datetime_long(new Date(1427304533478)).should.equal("Wednesday 25 March 2015 at 5:28 PM GMT");
      return done();
    });
    it("duration accepts times as Dates or millis", function(done) {
      var later, now;
      now = new Date();
      later = new Date(now.getTime() + 6 * 60 * 60 * 1000 + 2 * 60 * 1000 + 3 * 1000 + 123);
      DateUtil.duration(later, now).string.brief.short.should.equal("6h 2m 3s 123m");
      DateUtil.duration(later.getTime(), now).string.brief.short.should.equal("6h 2m 3s 123m");
      DateUtil.duration(later, now.getTime()).string.brief.short.should.equal("6h 2m 3s 123m");
      DateUtil.duration(later.getTime(), now.getTime()).string.brief.short.should.equal("6h 2m 3s 123m");
      return done();
    });
    it("duration can parse a duration in various human-readable forms", function(done) {
      var found, i, j, len, len1, test, tests;
      tests = [[123, "123m"], [3 * 1000 + 123, "3s 123m"], [2 * 60 * 1000 + 3 * 1000 + 123, "2m 3s 123m"], [6 * 60 * 60 * 1000 + 2 * 60 * 1000 + 3 * 1000 + 123, "6h 2m 3s 123m"], [5 * 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000 + 2 * 60 * 1000 + 3 * 1000 + 123, "5d 6h 2m 3s 123m"], [3 * 7 * 24 * 60 * 60 * 1000 + 5 * 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000 + 2 * 60 * 1000 + 3 * 1000 + 123, "3w 5d 6h 2m 3s 123m"], [9 * 52 * 7 * 24 * 60 * 60 * 1000 + 3 * 7 * 24 * 60 * 60 * 1000 + 5 * 24 * 60 * 60 * 1000 + 6 * 60 * 60 * 1000 + 2 * 60 * 1000 + 3 * 1000 + 123, "9y 3w 5d 6h 2m 3s 123m"]];
      for (i = 0, len = tests.length; i < len; i++) {
        test = tests[i];
        found = DateUtil.duration(test[0], 0);
        found.string.brief.short.should.equal(test[1]);
      }
      tests = [[123, "123 milliseconds"], [3 * 1000, "3 seconds"], [1 * 60 * 1000, "1 minute"], [6 * 60 * 60 * 1000, "6 hours"], [5 * 24 * 60 * 60 * 1000, "5 days"], [3 * 7 * 24 * 60 * 60 * 1000, "3 weeks"], [9 * 52 * 7 * 24 * 60 * 60 * 1000, "9 years"]];
      for (j = 0, len1 = tests.length; j < len1; j++) {
        test = tests[j];
        found = DateUtil.duration(test[0], 0);
        found.string.min.long.should.equal(test[1]);
      }
      return done();
    });
    return it("can match ISO8601 dates", function(done) {
      var matches;
      DateUtil.iso_8601_regexp().test((new Date()).toISOString()).should.be.ok;
      matches = "2014-12-17T23:55:22.192Z".match(DateUtil.iso_8601_regexp());
      matches[0].should.equal("2014-12-17T23:55:22.192Z");
      matches[1].should.equal("2014-12-17");
      matches[2].should.equal("2014");
      matches[3].should.equal("12");
      matches[4].should.equal("17");
      matches[5].should.equal("23:55:22.192Z");
      matches[6].should.equal("23");
      matches[7].should.equal("55");
      matches[8].should.equal("22.192");
      matches[9].should.equal("22");
      matches[10].should.equal("192");
      matches[11].should.equal("Z");
      return done();
    });
  });

}).call(this);

//# sourceMappingURL=test-date-util.js.map
