// Generated by CoffeeScript 1.12.6
(function() {
  var HOME_DIR, LIB_COV, LIB_DIR, NetUtil, assert, fs, path, should,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  assert = require('assert');

  should = require('should');

  fs = require('fs');

  path = require('path');

  HOME_DIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOME_DIR, 'lib-cov');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : path.join(HOME_DIR, 'lib');

  NetUtil = require(path.join(LIB_DIR, 'net-util')).NetUtil;

  describe('NetUtil', function() {
    it("can get the current pid", (function(_this) {
      return function(done) {
        (typeof NetUtil.get_pid()).should.equal("number");
        return done();
      };
    })(this));
    it("can get a random port in the given range", (function(_this) {
      return function(done) {
        var port;
        port = NetUtil.random_port(2000, 100);
        port.should.not.be.below(2000);
        port.should.not.be.above(2100);
        return done();
      };
    })(this));
    it("can get an unused port", (function(_this) {
      return function(done) {
        var port;
        port = NetUtil.get_unused_port();
        (typeof port).should.equal("number");
        NetUtil.is_port_in_use(port, function(err, in_use) {
          should.not.exist(err);
          in_use.should.equal(false);
          return done();
        });
        return port.should.not.be.below(2000);
      };
    })(this));
    it("calls-back with an error if the hostname does not resolve", function(done) {
      return NetUtil.resolve_hostname('itunesssssss.com', function(err, res) {
        assert(err.code === 'ENOTFOUND');
        assert(res == null);
        return done();
      });
    });
    return it("ensure that itunes resolves as desired", function(done) {
      var ips;
      ips = ['17.172.224.35', '17.178.96.29', '17.142.160.29'];
      return NetUtil.resolve_hostname('itunes.com', function(err, res) {
        assert(err == null);
        assert.equal(indexOf.call(ips, res) >= 0, true, 'address mismatch');
        return done();
      });
    });
  });

}).call(this);
