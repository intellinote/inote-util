// Generated by CoffeeScript 1.12.6
(function() {
  var HOMEDIR, LIB, LIB_COV, LIB_DIR, Stopwatch, fs, path, should;

  should = require('should');

  fs = require('fs');

  path = require('path');

  HOMEDIR = path.join(__dirname, '..');

  LIB_COV = path.join(HOMEDIR, 'lib-cov');

  LIB = path.join(HOMEDIR, 'lib');

  LIB_DIR = fs.existsSync(LIB_COV) ? LIB_COV : LIB;

  Stopwatch = require(path.join(LIB_DIR, 'stopwatch')).Stopwatch;

  describe("Stopwatch", function() {
    beforeEach((function(_this) {
      return function(done) {
        _this.method_started = false;
        _this.method_finished = false;
        _this.a_slow_method = function() {
          var foo, i, j, k, l, ref, sum, ts;
          _this.method_started = true;
          ts = Date.now();
          while (Date.now() - ts < 300) {
            foo = [1];
            for (i = k = 1; k < 1000; i = ++k) {
              sum = 0;
              for (j = l = 0, ref = i; 0 <= ref ? l < ref : l > ref; j = 0 <= ref ? ++l : --l) {
                sum += foo[j];
              }
              foo[i] = j;
            }
          }
          return _this.method_finished = true;
        };
        return done();
      };
    })(this));
    it("can be used for timing \"inline\".", (function(_this) {
      return function(done) {
        var timer;
        timer = Stopwatch.start();
        timer.should.exist;
        timer.start_time.should.exist;
        should.not.exist(timer.finish_time);
        should.not.exist(timer.elapsed_time);
        _this.a_slow_method();
        timer.stop();
        timer.start_time.should.exist;
        timer.finish_time.should.exist;
        timer.elapsed_time.should.exist;
        timer.finish_time.should.be.above(timer.start_time);
        timer.elapsed_time.should.be.above(0);
        should.not.exist(timer.stop);
        _this.method_started.should.be.ok;
        _this.method_finished.should.be.ok;
        return done();
      };
    })(this));
    it("can be used to track \"lap\" times.", (function(_this) {
      return function(done) {
        var timer;
        timer = Stopwatch.start();
        timer.start_time.should.exist;
        should.not.exist(timer.finish_time);
        should.not.exist(timer.elapsed_time);
        should.not.exist(timer.laps);
        _this.a_slow_method();
        timer.lap();
        should.not.exist(timer.finish_time);
        should.not.exist(timer.elapsed_time);
        timer.laps.should.exist;
        timer.laps.length.should.equal(1);
        timer.laps[0].lap_start_time.should.equal(timer.start_time);
        timer.laps[0].lap_finish_time.should.exist;
        timer.laps[0].lap_finish_time.should.be.above(timer.laps[0].lap_start_time);
        timer.laps[0].lap_time.should.equal(timer.laps[0].lap_finish_time - timer.laps[0].lap_start_time);
        timer.laps[0].lap_elapsed_time.should.equal(timer.laps[0].lap_finish_time - timer.start_time);
        _this.a_slow_method();
        timer.lap();
        should.not.exist(timer.finish_time);
        should.not.exist(timer.elapsed_time);
        timer.laps.should.exist;
        timer.laps.length.should.equal(2);
        timer.laps[1].lap_start_time.should.equal(timer.laps[0].lap_finish_time);
        timer.laps[1].lap_finish_time.should.exist;
        timer.laps[1].lap_finish_time.should.be.above(timer.laps[1].lap_start_time);
        timer.laps[1].lap_time.should.equal(timer.laps[1].lap_finish_time - timer.laps[1].lap_start_time);
        timer.laps[1].lap_elapsed_time.should.equal(timer.laps[1].lap_finish_time - timer.start_time);
        _this.a_slow_method();
        timer.lap();
        should.not.exist(timer.finish_time);
        should.not.exist(timer.elapsed_time);
        timer.laps.should.exist;
        timer.laps.length.should.equal(3);
        timer.laps[2].lap_start_time.should.equal(timer.laps[1].lap_finish_time);
        timer.laps[2].lap_finish_time.should.exist;
        timer.laps[2].lap_finish_time.should.be.above(timer.laps[2].lap_start_time);
        timer.laps[2].lap_time.should.equal(timer.laps[2].lap_finish_time - timer.laps[2].lap_start_time);
        timer.laps[2].lap_elapsed_time.should.equal(timer.laps[2].lap_finish_time - timer.start_time);
        _this.a_slow_method();
        timer.stop();
        timer.start_time.should.exist;
        timer.finish_time.should.exist;
        timer.elapsed_time.should.exist;
        timer.finish_time.should.be.above(timer.start_time);
        timer.elapsed_time.should.be.above(0);
        timer.laps.should.exist;
        timer.laps.length.should.equal(4);
        timer.laps[3].lap_start_time.should.equal(timer.laps[2].lap_finish_time);
        timer.laps[3].lap_finish_time.should.exist;
        timer.laps[3].lap_finish_time.should.be.above(timer.laps[3].lap_start_time);
        timer.laps[3].lap_finish_time.should.equal(timer.finish_time);
        timer.laps[3].lap_time.should.equal(timer.laps[3].lap_finish_time - timer.laps[3].lap_start_time);
        timer.laps[3].lap_elapsed_time.should.equal(timer.laps[3].lap_finish_time - timer.start_time);
        timer.laps[3].lap_elapsed_time.should.equal(timer.elapsed_time);
        should.not.exist(timer.stop);
        should.not.exist(timer.lap);
        return done();
      };
    })(this));
    it("doesn't always give the same time.", (function(_this) {
      return function(done) {
        var result;
        result = [];
        result[2] = Stopwatch.start();
        result[1] = Stopwatch.start();
        result[0] = Stopwatch.start().stop();
        _this.a_slow_method();
        result[1] = result[1].stop();
        _this.a_slow_method();
        result[2] = result[2].stop();
        result[2].elapsed_time.should.be.above(result[1].elapsed_time);
        result[1].elapsed_time.should.be.above(result[0].elapsed_time);
        return done();
      };
    })(this));
    it("can wrap a method in order to time it.", (function(_this) {
      return function(done) {
        var result;
        _this.method_started.should.not.be.ok;
        _this.method_finished.should.not.be.ok;
        result = Stopwatch.time(_this.a_slow_method);
        _this.method_started.should.be.ok;
        _this.method_finished.should.be.ok;
        result.should.exist;
        result.start_time.should.exist;
        result.finish_time.should.exist;
        result.elapsed_time.should.exist;
        result.finish_time.should.be.above(result.start_time);
        result.elapsed_time.should.be.above(0);
        return done();
      };
    })(this));
    return it("returns any provided data (wrapped)", (function(_this) {
      return function(done) {
        var result;
        _this.method_started.should.not.be.ok;
        _this.method_finished.should.not.be.ok;
        result = Stopwatch.time({
          alpha: 1,
          beta: 2
        }, _this.a_slow_method);
        _this.method_started.should.be.ok;
        _this.method_finished.should.be.ok;
        result.should.exist;
        result.start_time.should.exist;
        result.finish_time.should.exist;
        result.elapsed_time.should.exist;
        result.finish_time.should.be.above(result.start_time);
        result.elapsed_time.should.be.above(0);
        result.alpha.should.equal(1);
        result.beta.should.equal(2);
        return done();
      };
    })(this));
  });

}).call(this);

//# sourceMappingURL=test-stopwatch.js.map
